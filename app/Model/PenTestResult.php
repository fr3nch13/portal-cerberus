<?php
App::uses('AppModel', 'Model');
App::uses('CakeSession', 'Model/Datasource');

class PenTestResult extends AppModel 
{
	public $order = array('PenTestResult.id' => 'DESC');
	
	public $belongsTo = array(
		'PenTestResultAddedUser' => array(
			'className' => 'User',
			'foreignKey' => 'added_user_id',
		),
		'PenTestResultModifiedUser' => array(
			'className' => 'User',
			'foreignKey' => 'modified_user_id',
		),
		'ReportsRemediationUser' => array(
			'className' => 'User',
			'foreignKey' => 'remediation_user_id',
		),
		'ReportsVerificationUser' => array(
			'className' => 'User',
			'foreignKey' => 'verification_user_id',
		),
		'ReportsStatusUser' => array(
			'className' => 'User',
			'foreignKey' => 'status_user_id',
		),
		'EolSoftware' => array(
			'className' => 'EolSoftware',
			'foreignKey' => 'eol_software_id',
			'plugin_filter' => array(
				'name' => 'EOL Software',
			),
			'plugin_snapshot' => true,
			// used for the newer multiselect stuff
			// possibly used in other places as well
			'multiselect' => true,
			'nameSingle' => 'EOL Software',
		),
		'ReportsAssignableParty' => array(
			'className' => 'ReportsAssignableParty',
			'foreignKey' => 'reports_assignable_party_id',
			'plugin_filter' => array(
				'name' => 'Assignable Party',
			),
			'plugin_snapshot' => true,
			// used for the newer multiselect stuff
			// possibly used in other places as well
			'multiselect' => true,
			'nameSingle' => 'Assignable Party',
		),
		'ReportsOrganization' => array(
			'className' => 'ReportsOrganization',
			'foreignKey' => 'reports_organization_id',
			'plugin_filter' => array(
				'name' => 'Organization',
			),
			'plugin_snapshot' => true,
			// used for the newer multiselect stuff
			// possibly used in other places as well
			'multiselect' => true,
			'nameSingle' => 'Organization',
		),
		'ReportsRemediation' => array(
			'className' => 'ReportsRemediation',
			'foreignKey' => 'reports_remediation_id',
			'plugin_filter' => array(
				'name' => 'Remediation',
			),
			'plugin_snapshot' => true,
			// used for the newer multiselect stuff
			// possibly used in other places as well
			'multiselect' => true,
			'nameSingle' => 'Remediation',
		),
		'ReportsSeverity' => array(
			'className' => 'ReportsSeverity',
			'foreignKey' => 'reports_severity_id',
			'plugin_filter' => array(
				'name' => 'Severity',
			),
			'plugin_snapshot' => true,
			// used for the newer multiselect stuff
			// possibly used in other places as well
			'multiselect' => true,
			'nameSingle' => 'Severity',
		),
		'ReportsStatus' => array(
			'className' => 'ReportsStatus',
			'foreignKey' => 'reports_status_id',
			'plugin_filter' => array(
				'name' => 'Status',
			),
			'plugin_snapshot' => true,
			// used for the newer multiselect stuff
			// possibly used in other places as well
			'multiselect' => true,
			'nameSingle' => 'Status',
		),
		'ReportsVerification' => array(
			'className' => 'ReportsVerification',
			'foreignKey' => 'reports_verification_id',
			'plugin_filter' => array(
				'name' => 'Verification',
			),
			'plugin_snapshot' => true,
			// used for the newer multiselect stuff
			// possibly used in other places as well
			'multiselect' => true,
			'nameSingle' => 'Verification',
		),
		'FismaSoftware' => array(
			'className' => 'FismaSoftware',
			'foreignKey' => 'fisma_software_id',
		),
		'FismaSystem' => array(
			'className' => 'FismaSystem',
			'foreignKey' => 'fisma_system_id',
			'multiselect' => true,
		),
	);
	
	public $hasMany = array(
		'PenTestResultLog' => array(
			'className' => 'PenTestResultLog',
			'foreignKey' => 'pen_test_result_id',
			'dependent' => true,
		),
		'SubnetMember' => array(
			'className' => 'SubnetMember',
			'foreignKey' => 'pen_test_result_id',
			'dependent' => true,
		),
	);
	
	public $hasAndBelongsToMany = array(
		'PenTestReport' => array(
			'className' => 'PenTestReport',
			'joinTable' => 'pen_test_reports_pen_test_results',
			'foreignKey' => 'pen_test_result_id',
			'associationForeignKey' => 'pen_test_report_id',
			'unique' => 'keepExisting',
			'with' => 'PenTestReportPenTestResult',
		),
	);
	
	public $actsAs = array(
		'ReportsResults',
		'Tags.Taggable',
		'PhpExcel.PhpExcel',
		'Snapshot.Stat' => array(
			'entities' => array(
				'all' => array(),
				'created' => array(),
				'modified' => array(),
			),
		),
	);
	
	// define the fields that can be searched
	public $searchFields = array(
		'PenTestResult.id',
		'PenTestResult.software',
		'PenTestResult.ip_address',
		'PenTestResult.host_name',
		'PenTestResult.asset_tag',
		'PenTestResult.host_description',
		'PenTestResult.netbios',
		'PenTestResult.port',
		'PenTestResult.service',
		'PenTestResult.vulnerability',
		'PenTestResult.software',
		'PenTestResult.cve',
		'PenTestResult.tickets',
		'PenTestResult.waiver',
		'PenTestResult.example_id',
		'EolSoftware.name',
		'ReportsOrganization.name',
	);
	
	// used with Utilities.CommonHelper::Common_nslookup();
	public $hostLookupFields = array(
		'ipaddress' => 'ip_address',
		'hostname' => 'host_name',
	);
	
	public $dbReportsEventId = false;
	
	public function setDbEventId($reports_event_id = false)
	{
		if($reports_event_id === false)
			return false;
		
		$reportsEvent = $this->PenTestReport->ReportsEvent->read(null, $reports_event_id);
		if($reports_event_id > 0 and !$reportsEvent)
		{
			return false;
		}
		
		$this->dbReportsEventId = $reports_event_id;
		
		// save it to the session
		CakeSession::write('PenTestResult.dbReportsEventId', $reports_event_id);
		
		return $reports_event_id;
	}
	
	public function getDbEventId()
	{
		if($this->dbReportsEventId)
			return $this->dbReportsEventId;
		
		$this->dbReportsEventId = CakeSession::read('PenTestResult.dbReportsEventId');
		
		return $this->dbReportsEventId;
	}
	
	public function getIdsForEvent($reports_event_id = false)
	{
		if($reports_event_id === false)
			$reports_event_id = $this->getDbEventId();
		if(!$reports_event_id)
			return false;
		
		// find all of the reports in this event.
		if($result_ids = Cache::read('PenTestResult.event_result_ids.'. $reports_event_id))
			return $result_ids;
		
		if($reportIds = $this->PenTestReport->getIdsForEvent($reports_event_id))
		{
			$result_ids = $this->PenTestReportPenTestResult->find('list', array(
				'conditions' => array(
					'PenTestReportPenTestResult.pen_test_report_id' => $reportIds,
				),
				'fields' => array('PenTestReportPenTestResult.pen_test_result_id', 'PenTestReportPenTestResult.pen_test_result_id'),
			));
			Cache::write('PenTestResult.event_result_ids.'. $reports_event_id, $result_ids);
		}
		return $result_ids;
	}
	
	public function multiselectItems($data = array(), $values = array())
	{
		// injector to get the notes appending working
		
		$ids = array();
		if(isset($data['multiple']))
		{
			$ids = $data['multiple'];
		}
		
		if(!$ids)
			return false;
		
		$results = $this->find('list', array(
			'recursive' => -1,
			'fields' => array('PenTestResult.id', 'PenTestResult.notes'),
			'conditions' => array(
				'PenTestResult.id' => $ids,
			),
		));
		
		$notes_info = __("\n\n---- %s - %s - user_id:%s ----\n",
			date('Y-m-d H:i:s'),
			AuthComponent::user('name'),
			AuthComponent::user('id')
		);
		
		$saveMany_data = array();
		foreach($results as $result_id => $result_notes)
		{	
			$saveMany_data[$result_id] = array('id' => $result_id);
			
			if(isset($values['PenTestResult']['notes']))
			{
				if(trim($values['PenTestResult']['notes']))
					$saveMany_data[$result_id]['notes'] = $result_notes. $notes_info. $values['PenTestResult']['notes'];
				else
					unset($values['PenTestResult']['notes']);
			}
			
			$saveMany_data[$result_id] = array_merge($values['PenTestResult'], $saveMany_data[$result_id]);
		}
		
		return $this->saveMany($saveMany_data);
	}
	
	public function rescan($id = false)
	{
		$this->SubnetMember->subnetsToPenTestResult($id);
	}
	
	public function fixData($data = array())
	{
		if(isset($data[$this->alias]['mac_address']) and $data[$this->alias]['mac_address'])
		{
			$data[$this->alias]['mac_address'] = strtoupper($data[$this->alias]['mac_address']);
			$data[$this->alias]['mac_address'] = preg_replace('/[^a-zA-Z0-9]+/',"", $data[$this->alias]['mac_address']);
		}
		
		return $data;
	}
	
	public function importToReport($pen_test_report_id = false, $data = array())
	{
		$this->modelError = false;
		$this->PenTestReport->modelError = false;
		// scan the file
		if(!$results = $this->importItemsFromExcel($pen_test_report_id))
		{
			$error = __('Unable to Import %s from the Excel File.', __('Pen Test Results'));
			if(!$this->modelError) $this->modelError = $error;
			if(!$this->PenTestReport->modelError) $this->PenTestReport->modelError = $error;
			$this->PenTestReport->delete($pen_test_report_id);
			return false;
		}
		
		// save the new ids to the xref table
		if(count($results['new_ids']))
			$this->PenTestReportPenTestResult->saveAssociatedResults($pen_test_report_id, $results['new_ids']);
		return true;
	}
	
	public function importItemsFromExcel($id = false)
	{
		$this->modelError = false;
		$this->PenTestReport->modelError = false;
		
		if(!$id)
		{
			$id = $this->PenTestReport->id;
		}
		
		if(!$id)
		{
			$error = __('No ID given for the %s.', __('Pen Test Report'));
			if(!$this->modelError) $this->modelError = $error;
			if(!$this->PenTestReport->modelError) $this->PenTestReport->modelError = $error;
			return false;
		}
		
		$this->PenTestReport->recursive = 1;
		$this->PenTestReport->contain(array('Tag', 'ReportsEvent'));
		$report_data = $this->PenTestReport->read(null, $id);
		
		// scan the file
		$results = $this->scanExcelFile($id);
		if(!$results)
		{
			$error = __('No Results were found in the Excel File. (%s)', 1);
			if(!$this->modelError) $this->modelError = $error;
			if(!$this->PenTestReport->modelError) $this->PenTestReport->modelError = $error;
			return false;
		}
		
		extract($results);
		
		// add/update the software if any are found
		foreach($eol_software as $i => $software)
		{
			$software['is_vuln'] = true;
			// check/add the software
			if(isset($software['key']) and trim($software['key']))
				$eol_software[$i]['id'] = $this->EolSoftware->checkAdd($software['key'], $software);
		}
		
		$new_results = array();
		// used for checking for duplicates
		$eol_software_ids = array();
		$mac_addresses = array();
		$netbioses = array();
		$asset_tags = array();
		$host_names = array();
		$ip_addresses = array(); 
		
		foreach($results as $i => $result)
		{
			$new_result = array();
			$nr_result_key = array();
			
			if(isset($result['example_id']) and $result['example_id'])
			
			if(isset($result['uid']) and $result['uid'])
				$nr_result_key[] = $result['uid'];
			
			if(isset($result['cerberus_id']) and $result['cerberus_id'])
			{
				$cerberus_id = explode(', ', $result['cerberus_id']);
				sort($cerberus_id);
				$nr_result_key[] = implode(', ', $cerberus_id);
			}
			
			if(isset($report_data['PenTestReport']['added_user_id']) and $report_data['PenTestReport']['added_user_id'])
				$new_result['added_user_id'] = $report_data['PenTestReport']['added_user_id'];
			
			// check the eol software
			$eol_software_id = 0;
			if(isset($result['eol_software_key']) and $result['eol_software_key'])
			{
				$eol_software_key = $result['eol_software_key'];
				if(isset($eol_software[$eol_software_key]['id']))
					$eol_software_id = $new_result['eol_software_id'] = $eol_software[$eol_software_key]['id'];
			}
			$nr_result_key[] = $eol_software_ids[$eol_software_id] = $eol_software_id;
			
			// the division
			if(isset($result['ic_division']) and $result['ic_division'])
				$new_result['reports_organization_id'] = $this->ReportsOrganization->checkAdd($result['ic_division']);
				
			/// change how we're doing this to save this info on the table itself
			
			if(isset($result['user_account_name']) and $result['user_account_name'])
				$new_result['user_account_name'] = $result['user_account_name'];
			elseif(isset($result['user_accout_name']) and $result['user_accout_name'])
				$new_result['user_account_name'] = $result['user_accout_name'];
			
			if(isset($result['mac_address']) and $result['mac_address'])
				$new_result['mac_address'] = $nr_result_key[] = $mac_addresses[$result['mac_address']] = $result['mac_address'];
			
			if(isset($result['netbios']) and $result['netbios'])
				$new_result['netbios'] = $nr_result_key[] = $netbioses[$result['netbios']] = $result['netbios'];
			
			if(isset($result['asset_tag']) and $result['asset_tag'])
				$new_result['asset_tag'] = $nr_result_key[] = $asset_tags[$result['asset_tag']] = $result['asset_tag'];
			
			if(isset($result['host_name']) and $result['host_name'])
				$new_result['host_name'] = $nr_result_key[] = $host_names[$result['host_name']] = $result['host_name'];
			
			if(isset($result['ip_address']) and $result['ip_address'])
				$new_result['ip_address'] = $nr_result_key[] = $ip_addresses[$result['ip_address']] = $result['ip_address'];
			
			if(isset($result['port']) and $result['port'])
				$new_result['port'] = $result['port'];
			
			//service_vulnerable_service_used
			if(isset($result['service']) and $result['service'])
				$new_result['service'] = $result['service'];
			elseif(isset($result['service_vulnerable_service_used']) and $result['service_vulnerable_service_used'])
				$new_result['service'] = $result['service_vulnerable_service_used'];
			
			if(isset($result['services_version']) and $result['services_version'])
				$new_result['software'] = $result['services_version'];
			
			// find the severity
			if(isset($result['severity']) and $result['severity'])
				$new_result['reports_severity_id'] = $this->ReportsSeverity->checkAdd($result['severity']);
			elseif(isset($result['severity_color_purple_red_yellow']) and $result['severity_color_purple_red_yellow'])
				$new_result['reports_severity_id'] = $this->ReportsSeverity->checkAdd($result['severity_color_purple_red_yellow']);
			elseif(isset($result['color']) and $result['color'])
				$new_result['reports_severity_id'] = $this->ReportsSeverity->checkAdd($result['color']);
			
			// find the severity based on the 'color'
			if(!isset($new_result['reports_severity_id']) and isset($result['color']) and $result['color'])
				$new_result['reports_severity_id'] = $this->ReportsSeverity->checkAdd($result['color']);
			
			// status
			if(isset($result['status']) and $result['status'])
				$new_result['reports_status_id'] = $this->ReportsStatus->checkAdd($result['status']);
			
			// get verified user
			if(isset($result['verified_by']) and $result['verified_by'])
			{
				$result['verified_by'] = trim($result['verified_by']);
				$new_result['verified_by'] = $result['verified_by'];
				// see if we can also link to an existing user
				if($verified_user_id = $this->ReportsVerificationUser->field($this->ReportsVerificationUser->primaryKey, array('ReportsVerificationUser.name' => $result['verified_by'])))
				{
					$new_result['verification_user_id'] = $verified_user_id;
				}
			}
			elseif(isset($result['validated_by_ors_security']) and $result['validated_by_ors_security'])
			{
				$result['validated_by_ors_security'] = trim($result['validated_by_ors_security']);
				$new_result['verified_by'] = $result['validated_by_ors_security'];
				// see if we can also link to an existing user
				if($verified_user_id = $this->ReportsVerificationUser->field($this->ReportsVerificationUser->primaryKey, array('ReportsVerificationUser.name' => $result['validated_by_ors_security'])))
				{
					$new_result['verification_user_id'] = $verified_user_id;
				}
			}
			
			if(isset($result['ors_poc_for_remediation']) and $result['ors_poc_for_remediation'])
			{
				$result['ors_poc_for_remediation'] = trim($result['ors_poc_for_remediation']);
				$new_result['remediation_poc'] = $result['ors_poc_for_remediation'];
				// see if we can also link to an existing user
				if($remediation_user_id = $this->ReportsRemediationUser->field($this->ReportsRemediationUser->primaryKey, array('ReportsRemediationUser.name' => $result['ors_poc_for_remediation'])))
				{
					$new_result['remediation_user_id'] = $remediation_user_id;
				}
			}
			
			// get and possibly fix the verified date
			if(isset($result['date_verified']) and $result['date_verified'])
			{
				// have an excel date that needs to be fixed
				if(!strtotime($result['date_verified']))
				{
					$result['date_verified'] = $this->Excel_fixDate($result['date_verified']);
				}
				
				// just to make sure it worked
				if(strtotime($result['date_verified']))
					$new_result['verification_date'] = $result['date_verified'];
			}
			
			// get the action date
			if(isset($result['date_action_was_taken']) and $result['date_action_was_taken'])
			{
				// we have comments with the date
				$action_taken = false;
				if(!strtotime($result['date_action_was_taken']))
				{
					$matches = array();
					if(preg_match('#(\d+)/(\d+)/(\d+)#', $result['date_action_was_taken'], $matches));
					
					$date_string = __('%s/%s/%s', $matches[1], $matches[2], $matches[3]);
					$action_taken = str_replace($date_string, '', $result['date_action_was_taken']);
					$result['date_action_was_taken'] = $date_string;
				}
				
				// to make sure
				if(strtotime($result['date_action_was_taken']))
					$new_result['action_date'] = date('Y-m-d H:i:s', strtotime($result['date_action_was_taken']));
				
				if($action_taken)
					$new_result['action_taken'] = $action_taken;
			}
			
			// the text values
			// netBIOS
			if(isset($result['netbios']) and $result['netbios'])
				$new_result['netbios'] = $result['netbios'];
			
			// CVE
			if(isset($result['cve']) and $result['cve'])
				$new_result['cve'] = $result['cve'];
			
			// recommended action
			if(isset($result['recommended_action']) and $result['recommended_action'])
				$new_result['action_recommended'] = $result['recommended_action'];
			
			// description
			if(isset($result['detailed_description']) and $result['detailed_description'])
				$new_result['description'] = $result['detailed_description'];
			
			// waiver
			if(isset($result['waiver']) and $result['waiver'])
				$new_result['waiver'] = $result['waiver'];
			if(isset($result['waiver_id']) and $result['waiver_id'])
				$new_result['waiver'] = $result['waiver_id'];
			
			// tags
			if(isset($result['tags']) and $result['tags'])
				$new_result['tags'] = $result['tags'];
			elseif(isset($result['tag']) and $result['tag'])
				$new_result['tags'] = $result['tag'];
			
			// irt id
			$new_result['example_id'] = false;
			if(isset($result['uid']) and $result['uid'])
				$new_result['example_id'] = $result['uid'];
			
			$new_result['cerberus_id'] = array();
			if(isset($result['cerberus_id']) and $result['cerberus_id'])
				$new_result['cerberus_id'] = explode(', ', $result['cerberus_id']);
				
			//// all of the boolean values
			// nessus
			if(isset($result['nessus']) and $result['nessus'])
			{
				$new_result['nessus'] = in_array($result['nessus'], array('Yes'));
			}
			
			// notes
			if(isset($result['notes']) and $result['notes'])
				$new_result['notes'] = $result['notes'];
			elseif(isset($result['notes_section_for_security']) and $result['notes_section_for_security'])
				$new_result['notes'] = $result['notes_section_for_security'];
			
			// comments
			// find the comments as i don't trust the long key
			foreach($results as $k => $v)
			{
				if(preg_match('/^comments/', $k))
				{
					$new_result['comments'] = $v;
					unset($results[$k]);
				}
			}
			
			// if the report is tagged, tag the results as well
			if(!isset($new_result['tags']))
				$new_result['tags'] = '';
			
			if(isset($report_data['PenTestReport']['tags']))
				$new_result['tags'] .= ($new_result['tags']?', ':''). $report_data['PenTestReport']['tags'];
			
			// make sure the modified date isn't filled out
			$new_result['modified'] = false;
			
			// merge the rest with the new results
			$new_result = array_merge($result, $new_result);
			
			$nr_result_key = implode('~~', $nr_result_key);
			$new_result['nr_result_key'] = $nr_result_key;
			$new_results[$nr_result_key] = $new_result;
		}
		
		if(!$new_results)
		{
			$error = __('No Results were found in the Excel File. (%s)', 2);
			if(!$this->modelError) $this->modelError = $error;
			if(!$this->PenTestReport->modelError) $this->PenTestReport->modelError = $error;
			return false;
		}
		
		
/***  the new way of importing ***/
		$new_ids = array();
		foreach($new_results as $i => $new_result)
		{
			// if no irt, ignore
			if(!$new_result['example_id'])
			{
				unset($new_results[$i]);
				continue;
			}
			
			// if irt, but no cerberus
			if(!count($new_result['cerberus_id']))
			{
				// consider new
				continue;
			}
			elseif(count($new_result['cerberus_id']) > 1)
			{
				// if irt, and many cerberus, create as new, and update the service now with the cerberus ids
				$new_results[$i]['tickets'] = implode('; ', $new_result['cerberus_id']);
			}
			elseif(count($new_result['cerberus_id']) == 1)
			{
				// if irt, and one cerberus, update only certian fields
				$result_id = array_pop($new_result['cerberus_id']);
/*
	use software/vulnerability field from vulnerability name in the spreadsheet
	update detailed description from spreadsheet
	update cve from spreadsheet
	update service. combine service and service version fields in spreadsheet with a ;
	update port
	update severity from color in spreadsheet
*/
				$update_data = array(
					'id' => $result_id,
					'eol_software_id' => $new_result['eol_software_id'],
					'description' => $new_result['description'],
					'cve' => $new_result['cve'],
					'service' => $new_result['service'],
					'software' => $new_result['services_version'],
					'port' => $new_result['port'],
					'reports_severity_id' => $new_result['reports_severity_id'],
				);
				$this->id = $result_id;
				$this->data = $update_data;
				$this->save($this->data);
				unset($new_results[$i]);
				$new_ids[$result_id] = $result_id;
			}
		}
		
/*** The old way of importing and updating records
		// check for duplicates
		// only include results that will correlate with the event
		$existing = array();
		if(isset($report_data['ReportsEvent']['id']) and $report_data['ReportsEvent']['id'])
		{
			$existingConditions = array('OR' => array());
		
			$penTestReport_ids = $this->PenTestReport->find('list', array(
				'conditions' => array(
					'PenTestReport.reports_event_id' => $report_data['ReportsEvent']['id'],
				),
				'fields' => array('PenTestReport.id', 'PenTestReport.id'),
			));
			
			$penTestResult_ids = array();
			if($penTestReport_ids)
			{
				$penTestResult_ids = $this->PenTestReportPenTestResult->find('list', array(
					'conditions' => array(
						'PenTestReportPenTestResult.pen_test_report_id' => $penTestReport_ids,
					),
					'fields' => array('PenTestReportPenTestResult.pen_test_result_id', 'PenTestReportPenTestResult.pen_test_result_id'),
				));
			}
		
			$existingConditions['PenTestResult.id'] = $penTestResult_ids;
		
			if($eol_software_ids)
			{
				$existingConditions['PenTestResult.eol_software_id'] = $eol_software_ids;
			}
		
			if($mac_addresses)
				$existingConditions['OR'][] = array(
					'PenTestResult.mac_address !=' => '',
					'PenTestResult.mac_address' => $mac_addresses,
				);
			if($netbioses)
				$existingConditions['OR'][] = array(
					'PenTestResult.netbios !=' => '',
					'PenTestResult.netbios' => $netbioses,
				);
			if($asset_tags)
				$existingConditions['OR'][] = array(
					'PenTestResult.asset_tag !=' => '',
					'PenTestResult.asset_tag' => $asset_tags,
				);
			if($host_names)
				$existingConditions['OR'][] = array(
					'PenTestResult.host_name !=' => '',
					'PenTestResult.host_name' => $host_names,
				); 
			if($ip_addresses)
				$existingConditions['OR'][] = array(
					'PenTestResult.ip_address !=' => '',
					'PenTestResult.ip_address' => $ip_addresses,
				);
			
			if($penTestResult_ids)
			{
				$existing = $this->find('all', array(
					'recursive' => -1,
					'conditions' => $existingConditions,
					'fields' => array('id', 'eol_software_id', 'ip_address', 'host_name', 'mac_address', 'asset_tag'),
				));
			}
		}
		
		$new_ids = array();
		$compareKeys = array('mac_address', 'asset_tag', 'hostname', 'ip_address');
		if($existing)
		{
			foreach($existing as $record)
			{
				// try to find the new record that matched this existing one
				if($record[$this->alias]['eol_software_id'])
				{
					foreach($new_results as $new_result_id => $new_result)
						if($record[$this->alias]['eol_software_id'] == $new_result['eol_software_id'])
							$matchedResults[$new_result_id] = $new_result;
					
					if($matchedResults)
					{
						if($record[$this->alias]['mac_address'])
						{
							foreach($matchedResults as $new_result_id => $new_result)
								if($record[$this->alias]['mac_address'] != $new_result['mac_address'])
									unset($matchedResults[$new_result_id]);
						}
						elseif($record[$this->alias]['asset_tag'])
						{
							foreach($matchedResults as $new_result_id => $new_result)
								if($record[$this->alias]['asset_tag'] != $new_result['asset_tag'])
									unset($matchedResults[$new_result_id]);
						}
						elseif($record[$this->alias]['host_name'])
						{
							foreach($matchedResults as $new_result_id => $new_result)
								if($record[$this->alias]['host_name'] != $new_result['host_name'])
									unset($matchedResults[$new_result_id]);
						}
						elseif($record[$this->alias]['ip_address'])
						{
							foreach($matchedResults as $new_result_id => $new_result)
								if($record[$this->alias]['ip_address'] != $new_result['ip_address'])
									unset($matchedResults[$new_result_id]);
						}
						
					}
					
					if($matchedResults)
					{
						// see if the 2 results are different
						foreach($matchedResults as $nr_result_key_this => $matchedResult)
						{
							// track it so we can have an xref record to this
							$new_ids[$record[$this->alias]['id']] = $record[$this->alias]['id'];
							
							// remove it from the records, as it is existing, not new
							// we don't want to add a new result record, just the new xref record
							unset($new_results[$nr_result_key_this]);
						}
					}
				}
			}
		}
****/

		// add the new results;
		if($new_results)
		{
			foreach($new_results as $i => $new_result)
			{
				$this->create();
				$this->data = $new_result;
				if($this->save($this->data, false))
					$new_ids[$this->id] = $this->id;
			}
		}
		
		return array(
			'new_ids' => $new_ids,
		);
	}
	
	public function scanExcelFile($id = null, $pen_test_report_filepath = array())
	{
		if(!$id)
		{
			$id = $this->PenTestReport->id;
		}
		if(!$id)
		{
			return false;
		}
		
		if(!$pen_test_report_filepath)
		{
			$pen_test_report = $this->PenTestReport->read(null, $id);
			$pen_test_report_filepath = $pen_test_report['PenTestReport']['paths']['sys'];
		}
		
		$this->modelError = false;
		if(!$results = $this->Excel_fileToArray($pen_test_report_filepath))
		{
			if($this->modelError)
			{
				$this->modelError = __('An issue occurred when trying to scan the Excel file.');
			}
			return false;
		}
		
		// build the key cache
		$eol_software = array();
		foreach($results as $i => $result)
		{
			if(isset($result['vulnerability_name']) and $result['vulnerability_name'])
			{
				$softwareName = $result['vulnerability_name'];
				$softwareKey = $this->slugify($softwareName);
				$softwareAction = ((isset($result['recommended_action']) and $result['recommended_action'])?$result['recommended_action']:false);
				$softwareSeverity = ((isset($result['color']) and $result['color'])?$result['color']:false);
				
				if(!$softwareKey)
					continue;
				
				if(!isset($eol_software[$softwareKey]))
					$eol_software[$softwareKey] = array('id' => false, 'key' => $softwareKey, 'name' => $softwareName, 'action_recommended' => $softwareAction, 'severity' => $softwareSeverity);
				
				if($softwareAction and (!isset($eol_software[$softwareKey]['action_recommended']) or !$eol_software[$softwareKey]['action_recommended']))
					$eol_software[$softwareKey]['action_recommended'] = $softwareAction;
					
				if($softwareSeverity and (!isset($eol_software[$softwareKey]['color']) or !$eol_software[$softwareKey]['color']))
					$eol_software[$softwareKey]['severity'] = $softwareSeverity;
				
				$results[$i]['eol_software_key'] = $softwareKey;
			}
			else
			{
				unset($results[$i]);
			}
		}
		
		return array('eol_software' => $eol_software, 'results' => $results);
	}
	
	public function snapshotDashboardGetStats($snapshotKeyRegex = false, $start = false, $end = false)
	{
		return $this->Snapshot_dashboardStats($snapshotKeyRegex, $start, $end);
	}
	
	public function snapshotStats()
	{
		$entities = $this->Snapshot_dynamicEntities();
		return array();
	}
	
	public function snapshopCustomEntities($entityKeys = [])
	{
		if(!$entityKeys)
			return $entityKeys;
		
		// get all of the reports events
		if(!$eventIds = $this->PenTestReport->ReportsEvent->find('list'))
			return $entityKeys;
		
		// get the list of result ids that match this event
		foreach($eventIds as $eventId => $eventName)
		{
			if(!$conditions = $this->PenTestReportPenTestResult->getResultIdsForEvent($eventId))
			{
				unset($eventIds[$eventId]);
			}
			
			$eventIds[$eventId] = [
				'conditions' => $this->PenTestReportPenTestResult->getResultIdsForEvent($eventId),
			];
		}
		
		// find the keys with only 1 relationship level
		foreach($entityKeys as $entityKey => $blah)
		{
			if(preg_match('/^'.$this->alias.'\.\w+\-\d+$/i', $entityKey))
			{
				$entityParts = explode('.', $entityKey);
				$entityOtherKey = array_pop($entityParts);
				foreach($eventIds as $eventId => $eventCriteria)
				{
					$newEntityKey = $this->alias.'.'.$this->PenTestReport->ReportsEvent->alias.'-'.$eventId.'.'. $entityOtherKey;
					$entityKeys[$newEntityKey] = $eventCriteria;
				}
			}
		}
		return $entityKeys;
	}
	
	public function upsateExistingEolSoftware()
	{
		Configure::write('debug', 1);
		
		$results = $this->find('list', array(
			'conditions' => array(
				$this->alias.'.eol_software_id <' => 1
			),
			'fields' => array(
				$this->alias.'.id',
				$this->alias.'.vulnerability',
			), 
		));
		
		$vulnCache = array();
		
		foreach($results as $result_id => $vulnerability)
		{
			$slug = $this->slugify($vulnerability);
			
			$eol_software_id = 0;
			if(isset($vulnCache[$slug]))
			{
				$eol_software_id = $vulnCache[$slug];
			}
			else
			{
				$eol_software_id = $this->EolSoftware->checkAdd($slug, array('name' => $vulnerability));
			}
			
			$this->id = $result_id;
			$this->saveField('eol_software_id', $eol_software_id);
		}
		
	}
	
	public function updateExisting()
	{
		// update the existing results to the new many-many relationship
		$results = $this->find('list', array(
			'recursive' => -1,
			'fields' => array($this->alias.'.id', $this->alias.'.pen_test_report_id'),
		));
		
		// group the ids by report id
		$reports = array();
		foreach($results as $result_id => $report_id)
		{
			if(!isset($reports[$report_id]))
				$reports[$report_id] = array();
			$reports[$report_id][$result_id] = $result_id;
		}
		
		foreach($reports as $report_id => $result_ids)
		{
			$this->PenTestReportPenTestResult->saveAssociatedResults($report_id, $result_ids);
		}
	}

}
