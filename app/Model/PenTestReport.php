<?php
App::uses('AppModel', 'Model');
/**
 * PenTestReport Model
 *
 * @property AddedUser $AddedUser
 * @property ModifiedUser $ModifiedUser
 * @property PenTestResultLog $PenTestResultLog
 * @property PenTestResult $PenTestResult
 */
class PenTestReport extends AppModel 
{
	public $displayField = 'name';
	
	public $order = array('PenTestReport.report_date' => 'DESC');
	
	public $validate = array(
		'added_user_id' => array(
			'numeric' => array(
				'rule' => array('numeric'),
			),
		),
		'modified_user_id' => array(
			'numeric' => array(
				'rule' => array('numeric'),
			),
		),
		'name' => array(
			'notBlank' => array(
				'rule' => array('notBlank'),
			),
		),
		'report_date' => array(
			'notBlank' => array(
				'rule' => array('notBlank'),
			),
		),
		'reports_event_id' => array(
			'notBlank' => array(
				'rule' => array('notBlank'),
			),
		),
	);
	
	public $belongsTo = array(
		'AddedUser' => array(
			'className' => 'User',
			'foreignKey' => 'added_user_id',
		),
		'ModifiedUser' => array(
			'className' => 'User',
			'foreignKey' => 'modified_user_id',
		),
		'ReportsEvent' => array(
			'className' => 'ReportsEvent',
			'foreignKey' => 'reports_event_id',
		)
	);
	
	public $hasMany = array(
		'PenTestReportFile' => array(
			'className' => 'PenTestReportFile',
			'foreignKey' => 'pen_test_report_id',
			'dependent' => true,
		),
		'PenTestReportPenTestResult' => array(
			'className' => 'PenTestReportPenTestResult',
			'foreignKey' => 'pen_test_report_id',
			'dependent' => true,
		),
	);
	
	public $hasAndBelongsToMany = array(
		'PenTestResult' => array(
			'className' => 'PenTestResult',
			'joinTable' => 'pen_test_reports_pen_test_results',
			'foreignKey' => 'pen_test_report_id',
			'associationForeignKey' => 'pen_test_result_id',
			'unique' => 'keepExisting',
			'with' => 'PenTestReportPenTestResult',
		),
	);
	
	public $actsAs = array(
		'Tags.Taggable',
	);
	
	/// allow the Common App Controller to handle the files
	public $manageUploads = true;
	
	
	public function addReport($data = null)
	{
		$this->modelError = false;
		
		$this->data = $data;
		if(!$this->save($this->data))
		{
			return false;
		}
		
		// add the items from the form to this report 
		return $this->PenTestResult->importToReport($this->id, $data);
	}
	
	public function findForTrend($options = array())
	{
		if(!isset($options['order']))
			$options['order'] = array($this->alias.'.report_date' => 'ASC');
		
		$reports = $this->find('all', $options);
		
		$out = array(
			'legend' => array(
				'day' => __('Day'),
				$this->alias.'.total' => __('Total Results'),
			),
			'data' => array(),
		);
		
		foreach($reports as $i => $report)
		{
			$niceDate = date('M j, Y', strtotime($report[$this->alias]['report_date']));
			$out['data'][$niceDate] = array(
				'day' => $niceDate,
				$this->alias.'.total' => $this->PenTestReportPenTestResult->find('count', array(
					'conditions' => array(
						'PenTestReportPenTestResult.pen_test_report_id' => $report[$this->alias]['id'],
					),
				)),
			);
		}
		
		return $out;
	}
	
	public function getIdsForEvent($reports_event_id = false)
	{
		if(!$reports_event_id)
			return false;
		
		return $this->find('list', array(
			'conditions' => array(
				$this->alias.'.reports_event_id' => $reports_event_id,
			),
			'fields' => array($this->alias.'.id', $this->alias.'.id'),
		));
	}
}
