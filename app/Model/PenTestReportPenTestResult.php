<?php
App::uses('AppModel', 'Model');
class PenTestReportPenTestResult extends AppModel 
{
	public $useTable = 'pen_test_reports_pen_test_results';
	
	public $order = array('PenTestReportPenTestResult.created' => 'DESC');
	
	public $validate = array(
		'pen_test_report_id' => array(
			'numeric' => array(
				'rule' => array('numeric'),
			),
		),
		'pen_test_result_id' => array(
			'numeric' => array(
				'rule' => array('numeric'),
			),
		),
	);
	
	public $belongsTo = array(
		'PenTestReport' => array(
			'className' => 'PenTestReport',
			'foreignKey' => 'pen_test_report_id',
		),
		'PenTestResult' => array(
			'className' => 'PenTestResult',
			'foreignKey' => 'pen_test_result_id',
		),
	);
	
	public $actsAs = array(
		'Tags.Taggable',
	);
	
	// define the fields that can be searched
	public $searchFields = array(
		'PenTestResult.ip_address',
		'PenTestResult.host_name',
		'PenTestResult.mac_address',
		'PenTestReport.name',
	);
	
	public function saveAssociatedReports($pen_test_result_id = false, $pen_test_report_ids = array(), $pen_test_report_xref_data = array())
	{
		if(!$pen_test_report_ids) $pen_test_report_ids = array();
		
		// remove the existing records (incase they add a pen_test_report that is already associated with this pen_test_result)
		$existing = $this->find('list', array(
			'recursive' => -1,
			'fields' => array('PenTestReportPenTestResult.id', 'PenTestReportPenTestResult.pen_test_report_id'),
			'conditions' => array(
				'PenTestReportPenTestResult.pen_test_result_id' => $pen_test_result_id,
			),
		));
		
		// get just the new ones
		$pen_test_report_ids = array_diff($pen_test_report_ids, $existing);
		
		// build the proper save array
		$data = array();
		foreach($pen_test_report_ids as $pen_test_report => $pen_test_report_id)
		{
			$data[$pen_test_report] = array('pen_test_result_id' => $pen_test_result_id, 'pen_test_report_id' => $pen_test_report_id, 'active' => 1);
			if(isset($pen_test_report_xref_data[$pen_test_report]))
			{
				$data[$pen_test_report] = array_merge($pen_test_report_xref_data[$pen_test_report], $data[$pen_test_report]);
			}
		}
		return $this->saveMany($data);
	}
	
	public function saveAssociatedResults($pen_test_report_id = false, $pen_test_result_ids = array(), $pen_test_result_xref_data = array())
	{
		if(!$pen_test_result_ids) $pen_test_result_ids = array();
		
		// remove the existing records (incase they add a pen_test_result that is already associated with this pen_test_report)
		$existing = $this->find('list', array(
			'recursive' => -1,
			'fields' => array('PenTestReportPenTestResult.id', 'PenTestReportPenTestResult.pen_test_result_id'),
			'conditions' => array(
				'PenTestReportPenTestResult.pen_test_report_id' => $pen_test_report_id,
			),
		));
		
		// get just the new ones
		$pen_test_result_ids = array_diff($pen_test_result_ids, $existing);
		
		if($pen_test_result_ids)
		{
			// build the proper save array
			$data = array();
			foreach($pen_test_result_ids as $pen_test_result => $pen_test_result_id)
			{
				$data[$pen_test_result] = array('pen_test_report_id' => $pen_test_report_id, 'pen_test_result_id' => $pen_test_result_id, 'active' => 1);
				if(isset($pen_test_result_xref_data[$pen_test_result]))
				{
					$data[$pen_test_result] = array_merge($pen_test_result_xref_data[$pen_test_result], $data[$pen_test_result]);
				}
			}
			return $this->saveMany($data);
		}
		return true;
	}
	
	public function updateNewDuplicates($pen_test_report_id = false, $pen_test_result_data = array(), $modified_user_id = false)
	{
	//// updates the pen_test results, then makes sure they have an xref record 
		
		$result_ids = (isset($pen_test_result_data['all_ids']['id'])?$pen_test_result_data['all_ids']['id']:array());
		foreach($pen_test_result_data['PenTestReport'] as $pen_test_result)
		{
			if(isset($pen_test_result['PenTestResult']['new']) and $pen_test_result['PenTestResult']['new'])
			{
				unset($pen_test_result['PenTestResult']['new']);
				
				if(isset($pen_test_result['PenTestResult']['id']))
				{
					$existing_pen_test_result = $this->PenTestResult->read(null, $pen_test_result['PenTestResult']['id']);
					
					unset($pen_test_result['PenTestResult']['id']);
					unset($existing_pen_test_result['PenTestResult']['id']);
					unset($existing_pen_test_result['PenTestResult']['modified']);
					unset($existing_pen_test_result['PenTestResult']['modified_user_id']);
					unset($existing_pen_test_result['PenTestResult']['pen_test_software_id']);
					$pen_test_result['PenTestResult'] = array_merge($existing_pen_test_result['PenTestResult'], $pen_test_result['PenTestResult']);
					
				}
					
				$this->PenTestResult->create();
				$pen_test_result['PenTestResult']['created'] = date('Y-m-d H:i:s');
				$pen_test_result['PenTestResult']['added_user_id'] = $modified_user_id;
			}
			else
			{
				$this->PenTestResult->id = $pen_test_result['PenTestResult']['id'];
				$pen_test_result['PenTestResult']['modified'] = date('Y-m-d H:i:s');
				$pen_test_result['PenTestResult']['modified_user_id'] = $modified_user_id;
			}
			
			$this->PenTestResult->data = $pen_test_result;
			$this->PenTestResult->save($this->PenTestResult->data);
			$result_ids[$this->PenTestResult->id] = $this->PenTestResult->id;
		}
		
		// make sure we have the xref records
		return $this->saveAssociatedResults($pen_test_report_id, $result_ids);
	}
	
	public function getResultIdsForEvent($eventId = false)
	{
		if(!$eventId)
			return [];
		
		$penTestReport_ids = $this->PenTestResult->PenTestReport->find('list', [
			'conditions' => [
				$this->PenTestResult->PenTestReport->alias.'.reports_event_id' => $eventId,
			],
			'fields' => [$this->PenTestResult->PenTestReport->alias.'.id', $this->PenTestResult->PenTestReport->alias.'.id'],
		]);
		
		$penTestResult_ids = $this->PenTestResult->PenTestReportPenTestResult->find('list', [
			'conditions' => [
				$this->PenTestResult->PenTestReportPenTestResult->alias.'.pen_test_report_id' => $penTestReport_ids,
			],
			'fields' => [$this->PenTestResult->PenTestReportPenTestResult->alias.'.pen_test_result_id', $this->PenTestResult->PenTestReportPenTestResult->alias.'.pen_test_result_id'],
		]);
		
		$conditions = [
			$this->PenTestResult->alias.'.id' => $penTestResult_ids,
		];
		return $conditions;
	}
}
