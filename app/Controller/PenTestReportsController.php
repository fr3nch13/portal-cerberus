<?php
class PenTestReportsController extends AppController 
{
	public function db_tab_trend($reports_event_id = false)
	{
		$stats = array();
		$conditions = array();
		
		// get the result ids for this event
		if($reports_event_id)
		{
			if($penTestReport_ids = $this->PenTestReport->getIdsForEvent($reports_event_id))
			{
				$conditions['PenTestReport.id'] = $penTestReport_ids;
			}
		}
		$stats = $this->PenTestReport->findForTrend(array('conditions' => $conditions));
		
		$this->set(compact('stats'));
	}
	
	public function index() 
	{
		$this->Prg->commonProcess();
		
		$conditions = array();
		
		$conditions = array_merge($conditions, $this->conditions);
		
		$page_subtitle = (isset($this->viewVars['page_subtitle'])?$this->viewVars['page_subtitle']:__('All'));
		$page_description = (isset($this->viewVars['page_description'])?$this->viewVars['page_description']:'');
		$this->set(compact(array('page_subtitle', 'page_description')));
		
		$this->paginate['contain'] = array('ReportsEvent');
		$this->paginate['conditions'] = $this->PenTestReport->conditions($conditions, $this->passedArgs); 
		$this->set('pen_test_reports', $this->paginate());
		
		$reportsEvents = $this->PenTestReport->ReportsEvent->typeFormList();
		$this->set(compact(array(
			'reportsEvents',
		)));
	}
	
	public function reports_event($id = null) 
	{
		if (!$reportsEvent = $this->PenTestReport->ReportsEvent->read(null, $id))
		{
			throw new NotFoundException(__('Invalid %s', __('Reports Event')));
		}
		$this->set('reportsEvent', $reportsEvent);
		
		$page_subtitle = __('%s: %s', __('Reports Event'), $reportsEvent['ReportsEvent']['name']);
		$page_description = '';
		$this->set(compact(array('page_subtitle', 'page_description')));
		
		$conditions = array(
			'PenTestReport.reports_event_id' => $id,
		); 
		
		$this->conditions = $conditions;
		$this->index(); 
	}
	
	public function pen_test_result($id = null) 
	{
		if (!$penTestResult = $this->PenTestReport->PenTestResult->read(null, $id))
		{
			throw new NotFoundException(__('Invalid %s', __('Pen Test Result')));
		}
		$this->set('penTestResult', $penTestResult);
		
		$page_description = '';
		$this->set(compact(array('page_subtitle', 'page_description')));
		
		$penTestReport_ids = $this->PenTestReport->PenTestReportPenTestResult->find('list', array(
			'conditions' => array(
				'PenTestReportPenTestResult.pen_test_result_id' => $id,
			),
			'fields' => array('PenTestReportPenTestResult.pen_test_report_id', 'PenTestReportPenTestResult.pen_test_report_id'),
		));
		
		$conditions = array(
			'PenTestReport.id' => $penTestReport_ids,
		);
		
		$this->conditions = $conditions;
		$this->index(); 
	}
	
	public function tag($tag_id = null) 
	{
		if(!$tag_id) 
		{
			throw new NotFoundException(__('Invalid %s', __('Tag')));
		}
		
		$tag = $this->PenTestReport->Tag->read(null, $tag_id);
		if(!$tag) 
		{
			throw new NotFoundException(__('Invalid %s', __('Tag')));
		}
		$this->set('tag', $tag);
		
		$conditions = array();
		
		// include all if they're an admin
		if(AuthComponent::user('role') != 'admin')
			$conditions['PenTestReport.approved'] = true;
		
		$conditions[] = $this->PenTestReport->Tag->Tagged->taggedSql($tag['Tag']['keyname'], 'PenTestReport');
		
		$conditions = $this->PenTestReport->conditions($conditions, $this->passedArgs); 
		
		$this->conditions = $conditions;
		$this->index();
	}
	
	public function view($id = false)
	{
		
		$this->PenTestReport->id = $id;
		$this->PenTestReport->recursive = 0;
		if (!$pen_test_report = $this->PenTestReport->read(null, $id))
		{
			throw new NotFoundException(__('Invalid %s', __('Pen Test Report')));
		}
		
		$this->set('pen_test_report', $pen_test_report);
	}
	
	public function view_excel($id)
	{
		if (!$pen_test_report = $this->PenTestReport->read(null, $id))
		{
			throw new NotFoundException(__('Invalid %s', __('Pen Test Report')));
		}
		
		$this->set('pen_test_report', $pen_test_report);
		$this->set('excel_html', $this->PenTestReport->viewExcelFile($id));
	}

	public function admin_index() 
	{
		$this->bypassReferer = true;
		return $this->redirect(array('action' => 'index', 'admin' => false));
	}
	
	public function admin_view($id = false)
	{
		$this->bypassReferer = true;
		return $this->redirect(array('action' => 'view', $id, 'admin' => false));
	}
	
	public function admin_add() 
	{
		if ($this->request->is('post'))
		{
			$this->PenTestReport->create();
			
			$this->request->data['PenTestReport']['added_user_id'] = AuthComponent::user('id');
			if ($this->PenTestReport->addReport($this->request->data))
			{
				$this->Flash->success(__('The %s has been saved', __('Pen Test Report')));
				return $this->redirect(array('action' => 'view', $this->PenTestReport->id, 'admin' => false));
			}
			else
			{
				$this->Flash->error(__('The %s could not be saved. Reason: %s', __('Pen Test Report'), $this->PenTestReport->modelError));
			}
		}
		
		$reportsEvents = $this->PenTestReport->ReportsEvent->typeFormList();
		$this->set(compact(array(
			'reportsEvents',
		)));
	}
	
	public function admin_edit($id = null) 
	{
		$this->PenTestReport->id = $id;
		$this->PenTestReport->recursive = 1;
		$this->PenTestReport->contain(array('Tag'));
		if (!$pen_test_report = $this->PenTestReport->read(null, $id)) 
		{
			throw new NotFoundException(__('Invalid %s', __('Pen Test Report')));
		}
		
		if ($this->request->is('post') || $this->request->is('put')) 
		{
			if ($this->PenTestReport->save($this->request->data)) 
			{
				$this->Flash->success(__('The %s has been saved', __('Pen Test Report')));
				return $this->redirect(array('action' => 'view', $this->PenTestReport->id, 'admin' => false));
			}
			else
			{
				$this->Flash->error(__('The %s could not be saved. Please, try again.', __('Pen Test Report')));
			}
		}
		else
		{
			$this->request->data = $pen_test_report;
		}
		
		$reportsEvents = $this->PenTestReport->ReportsEvent->typeFormList();
		$this->set(compact(array(
			'reportsEvents',
		)));
	}
	
	public function admin_delete($id = null) 
	{
		$this->PenTestReport->id = $id;
		if (!$this->PenTestReport->exists()) {
			throw new NotFoundException(__('Invalid %s', __('Pen Test Report')));
		}
		if ($this->PenTestReport->delete()) {
			$this->Flash->success(__('%s deleted', __('Pen Test Report')));
			return $this->redirect(array('action' => 'index', 'admin' => false));
		}
		$this->Flash->error(__('%s was not deleted', __('Pen Test Report')));
		return $this->redirect(array('action' => 'index', 'admin' => false));
	}
}